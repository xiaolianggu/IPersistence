1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
  Mybatis动态 sql是以 xml标签的形 式编写动态 sql ，完成逻辑判断和动态拼接sql的
      有9种动态 SQL 标签：<if/>、<choose/>、<when/>、<otherwise/>、<trim/>、<when/>、<set/>、<foreach/>、<bind/>
     使用 OGNL表达式计算表达式的值,在根据表达式的值动态拼接 sql
     
     
2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
   支持，可以配置是否启用延迟加载lazyLoadingEnabled=true|false
 它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，
 那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理
 
3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，
                                            每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。

4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
MyBatis的一级缓存是基于SqlSession级别的，也就是说某个SqlSession进行某个查询操作后会将该结果暂时缓存起来，而后在所有的SqlSession没有
对该表进行插入、修改、删除操作的情况下，当这个SqlSession再次发起此查询时SqlSession不会去数据库执行查询操作，而是直接从缓存拿出上次查询的结果。
不同的SqlSession之间缓存的数据互不影响，每次请求数据库都会创建sqlsession(在没有开启事务的时候)，如果开启事务，同一个事务中sqlsession会共享

MyBatis的二级缓存是基于Mapper级别的，也就是说多个SqlSession去使用某个Mapper的查询语句时，得到的缓存数据是可共用的，
在一个mapper有插入、修改、删除操作的情况下，缓存失效



5、简述Mybatis的插件运行原理，以及如何编写一个插件？
   Executor,ParameterHandler,ResultSetHandler,StatementHandler,这几个对象都是代理对象，mybatis就是拦截这个几个对象来实现插件的
   编写插件要实现Interceptor接口通过注解@Intercepts标注要拦截的方法，以及参数然后保存到Configuration类的interceptorChain中，
 
